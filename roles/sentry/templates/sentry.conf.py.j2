from sentry.conf.server import *


import os.path

CONF_ROOT = os.path.dirname(__file__)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'sentry',
        'USER': 'sentry',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

SENTRY_USE_BIG_INTS = True

SENTRY_HOST = '{{ sentry_host }}'
SENTRY_WEB_HOST = '127.0.0.1'
SENTRY_WEB_PORT = 9000
SENTRY_WEB_OPTIONS = {
    'workers': 3,
}

# XXX: Run a separate redis server for TSDBs with persistence enabled.
SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
SENTRY_BUFFER_OPTIONS = { 'cluster': 'redis_cache' }

SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
SENTRY_CACHE_OPTIONS = { 'cluster': 'redis_cache' }

SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'
SENTRY_DIGESTS_OPTIONS = { 'cluster': 'redis_cache' }

SENTRY_NODESTORE = 'sentry.nodestore.django.DjangoNodeStorage'
SENTRY_NODESTORE_OPTIONS = {}

# XXX: Push this up to the nginx config. if we really need it.
SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
SENTRY_QUOTA_OPTIONS = { 'cluster': 'redis_cache' }

SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
SENTRY_RATELIMITER_OPTIONS = { 'cluster': 'redis_cache' }

SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
SENTRY_TSDB_OPTIONS = { 'cluster': 'redis_store' }

CELERY_ALWAYS_EAGER = False
BROKER_URL = "redis://localhost:6379/1"  # redis_cache

{% if sentry_google_client_id is defined %}
SENTRY_FEATURES['organizations:sso'] = True
GOOGLE_CLIENT_ID = '{{ sentry_google_client_id }}'
GOOGLE_CLIENT_SECRET = '{{ sentry_google_client_secret }}'
{% endif %}
